// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: http_dto.proto

package dto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpServiceClient is the client API for HttpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpServiceClient interface {
	CreateBot(ctx context.Context, in *CreateBotReq, opts ...grpc.CallOption) (*CreateBotResp, error)
	DeleteBot(ctx context.Context, in *DeleteBotReq, opts ...grpc.CallOption) (*DeleteBotResp, error)
	ListBot(ctx context.Context, in *ListBotReq, opts ...grpc.CallOption) (*ListBotResp, error)
	SolveCaptcha(ctx context.Context, in *SolveCaptchaReq, opts ...grpc.CallOption) (*SolveCaptchaResp, error)
	FetchQRCode(ctx context.Context, in *FetchQRCodeReq, opts ...grpc.CallOption) (*QRCodeLoginResp, error)
	QueryQRCodeStatus(ctx context.Context, in *QueryQRCodeStatusReq, opts ...grpc.CallOption) (*QRCodeLoginResp, error)
	ListPlugin(ctx context.Context, in *ListPluginReq, opts ...grpc.CallOption) (*ListPluginResp, error)
	SavePlugin(ctx context.Context, in *SavePluginReq, opts ...grpc.CallOption) (*SavePluginResp, error)
	DeletePlugin(ctx context.Context, in *DeletePluginReq, opts ...grpc.CallOption) (*DeletePluginResp, error)
}

type httpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpServiceClient(cc grpc.ClientConnInterface) HttpServiceClient {
	return &httpServiceClient{cc}
}

func (c *httpServiceClient) CreateBot(ctx context.Context, in *CreateBotReq, opts ...grpc.CallOption) (*CreateBotResp, error) {
	out := new(CreateBotResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) DeleteBot(ctx context.Context, in *DeleteBotReq, opts ...grpc.CallOption) (*DeleteBotResp, error) {
	out := new(DeleteBotResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) ListBot(ctx context.Context, in *ListBotReq, opts ...grpc.CallOption) (*ListBotResp, error) {
	out := new(ListBotResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/ListBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) SolveCaptcha(ctx context.Context, in *SolveCaptchaReq, opts ...grpc.CallOption) (*SolveCaptchaResp, error) {
	out := new(SolveCaptchaResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/SolveCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) FetchQRCode(ctx context.Context, in *FetchQRCodeReq, opts ...grpc.CallOption) (*QRCodeLoginResp, error) {
	out := new(QRCodeLoginResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/FetchQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) QueryQRCodeStatus(ctx context.Context, in *QueryQRCodeStatusReq, opts ...grpc.CallOption) (*QRCodeLoginResp, error) {
	out := new(QRCodeLoginResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/QueryQRCodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) ListPlugin(ctx context.Context, in *ListPluginReq, opts ...grpc.CallOption) (*ListPluginResp, error) {
	out := new(ListPluginResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/ListPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) SavePlugin(ctx context.Context, in *SavePluginReq, opts ...grpc.CallOption) (*SavePluginResp, error) {
	out := new(SavePluginResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/SavePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) DeletePlugin(ctx context.Context, in *DeletePluginReq, opts ...grpc.CallOption) (*DeletePluginResp, error) {
	out := new(DeletePluginResp)
	err := c.cc.Invoke(ctx, "/dto.HttpService/DeletePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpServiceServer is the server API for HttpService service.
// All implementations must embed UnimplementedHttpServiceServer
// for forward compatibility
type HttpServiceServer interface {
	CreateBot(context.Context, *CreateBotReq) (*CreateBotResp, error)
	DeleteBot(context.Context, *DeleteBotReq) (*DeleteBotResp, error)
	ListBot(context.Context, *ListBotReq) (*ListBotResp, error)
	SolveCaptcha(context.Context, *SolveCaptchaReq) (*SolveCaptchaResp, error)
	FetchQRCode(context.Context, *FetchQRCodeReq) (*QRCodeLoginResp, error)
	QueryQRCodeStatus(context.Context, *QueryQRCodeStatusReq) (*QRCodeLoginResp, error)
	ListPlugin(context.Context, *ListPluginReq) (*ListPluginResp, error)
	SavePlugin(context.Context, *SavePluginReq) (*SavePluginResp, error)
	DeletePlugin(context.Context, *DeletePluginReq) (*DeletePluginResp, error)
	mustEmbedUnimplementedHttpServiceServer()
}

// UnimplementedHttpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpServiceServer struct {
}

func (UnimplementedHttpServiceServer) CreateBot(context.Context, *CreateBotReq) (*CreateBotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedHttpServiceServer) DeleteBot(context.Context, *DeleteBotReq) (*DeleteBotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedHttpServiceServer) ListBot(context.Context, *ListBotReq) (*ListBotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBot not implemented")
}
func (UnimplementedHttpServiceServer) SolveCaptcha(context.Context, *SolveCaptchaReq) (*SolveCaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveCaptcha not implemented")
}
func (UnimplementedHttpServiceServer) FetchQRCode(context.Context, *FetchQRCodeReq) (*QRCodeLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQRCode not implemented")
}
func (UnimplementedHttpServiceServer) QueryQRCodeStatus(context.Context, *QueryQRCodeStatusReq) (*QRCodeLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryQRCodeStatus not implemented")
}
func (UnimplementedHttpServiceServer) ListPlugin(context.Context, *ListPluginReq) (*ListPluginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugin not implemented")
}
func (UnimplementedHttpServiceServer) SavePlugin(context.Context, *SavePluginReq) (*SavePluginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePlugin not implemented")
}
func (UnimplementedHttpServiceServer) DeletePlugin(context.Context, *DeletePluginReq) (*DeletePluginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlugin not implemented")
}
func (UnimplementedHttpServiceServer) mustEmbedUnimplementedHttpServiceServer() {}

// UnsafeHttpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServiceServer will
// result in compilation errors.
type UnsafeHttpServiceServer interface {
	mustEmbedUnimplementedHttpServiceServer()
}

func RegisterHttpServiceServer(s grpc.ServiceRegistrar, srv HttpServiceServer) {
	s.RegisterService(&HttpService_ServiceDesc, srv)
}

func _HttpService_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).CreateBot(ctx, req.(*CreateBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).DeleteBot(ctx, req.(*DeleteBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_ListBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).ListBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/ListBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).ListBot(ctx, req.(*ListBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_SolveCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).SolveCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/SolveCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).SolveCaptcha(ctx, req.(*SolveCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_FetchQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).FetchQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/FetchQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).FetchQRCode(ctx, req.(*FetchQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_QueryQRCodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQRCodeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).QueryQRCodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/QueryQRCodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).QueryQRCodeStatus(ctx, req.(*QueryQRCodeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_ListPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).ListPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/ListPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).ListPlugin(ctx, req.(*ListPluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_SavePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).SavePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/SavePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).SavePlugin(ctx, req.(*SavePluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_DeletePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).DeletePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.HttpService/DeletePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).DeletePlugin(ctx, req.(*DeletePluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpService_ServiceDesc is the grpc.ServiceDesc for HttpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dto.HttpService",
	HandlerType: (*HttpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBot",
			Handler:    _HttpService_CreateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _HttpService_DeleteBot_Handler,
		},
		{
			MethodName: "ListBot",
			Handler:    _HttpService_ListBot_Handler,
		},
		{
			MethodName: "SolveCaptcha",
			Handler:    _HttpService_SolveCaptcha_Handler,
		},
		{
			MethodName: "FetchQRCode",
			Handler:    _HttpService_FetchQRCode_Handler,
		},
		{
			MethodName: "QueryQRCodeStatus",
			Handler:    _HttpService_QueryQRCodeStatus_Handler,
		},
		{
			MethodName: "ListPlugin",
			Handler:    _HttpService_ListPlugin_Handler,
		},
		{
			MethodName: "SavePlugin",
			Handler:    _HttpService_SavePlugin_Handler,
		},
		{
			MethodName: "DeletePlugin",
			Handler:    _HttpService_DeletePlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_dto.proto",
}
